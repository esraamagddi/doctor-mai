tailwind.config = {
  theme: {
    extend: {
      colors: {
        primary: "#663130",
        secondary: "#f0eeeb",
        ternary: "#d2cac8",
        base: "#fffdf9",
        dark: "#1e0909",
      },
    },
  },
}


document.addEventListener('DOMContentLoaded', () => {
  // wow init
  new WOW().init();
  // Helpers
  const $ = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => [...root.querySelectorAll(sel)];

  // 1) Header scroll
  const header = $('#header');
  if (header) {
    window.addEventListener('scroll', () => {
      header.classList.toggle('scrolled', window.scrollY > 50);
    });
  }

  // 2) Mobile menu
  const mobileMenuBtn = $('#mobileMenuBtn');
  const nav = $('.nav');
  if (mobileMenuBtn && nav) {
    mobileMenuBtn.addEventListener('click', () => nav.classList.toggle('active'));
  }

  // 3) Smooth scroll
  $$('a[href^="#"]').forEach(a => {
    a.addEventListener('click', e => {
      const href = a.getAttribute('href');
      const target = href && href !== '#' ? $(href) : null;
      if (target) {
        e.preventDefault();
        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });

  // 4) Before/After slider
  const beforeAfterContainer = $('#beforeAfterContainer');
  const afterImageContainer = $('#afterImageContainer');
  const sliderLine = $('#sliderLine');

  if (beforeAfterContainer && afterImageContainer && sliderLine) {
    let isDragging = false;

    const updateSlider = x => {
      const rect = beforeAfterContainer.getBoundingClientRect();
      const pct = Math.max(0, Math.min(100, ((x - rect.left) / rect.width) * 100));
      afterImageContainer.style.clipPath = `inset(0 ${100 - pct}% 0 0)`;
      sliderLine.style.left = `${pct}%`;
    };

    const start = x => { isDragging = true; updateSlider(x); };
    const move = x => { if (isDragging) updateSlider(x); };
    const end = () => { isDragging = false; };

    beforeAfterContainer.addEventListener('mousedown', e => start(e.clientX));
    beforeAfterContainer.addEventListener('mousemove', e => move(e.clientX));
    document.addEventListener('mouseup', end);

    beforeAfterContainer.addEventListener('click', e => updateSlider(e.clientX));

    beforeAfterContainer.addEventListener('touchstart', e => start(e.touches[0].clientX), { passive: true });
    beforeAfterContainer.addEventListener('touchmove', e => { move(e.touches[0].clientX); }, { passive: false });
    beforeAfterContainer.addEventListener('touchend', end);
  }

  // 5) Testimonials slider (┘К╪┤╪к╪║┘Д ╪и╪│ ┘Д┘И ┘Б┘К┘З ╪╣┘Ж╪з╪╡╪▒)
  const testimonials = $$('.testimonial-item');
  const prevBtn = $('#prevBtn');
  const nextBtn = $('#nextBtn');
  let currentTestimonial = 0;

  const showTestimonial = idx => {
    testimonials.forEach((t, i) => { t.style.display = i === idx ? 'block' : 'none'; });
  };

  if (testimonials.length) {
    showTestimonial(0);
    if (prevBtn) prevBtn.addEventListener('click', () => {
      currentTestimonial = (currentTestimonial - 1 + testimonials.length) % testimonials.length;
      showTestimonial(currentTestimonial);
    });
    if (nextBtn) nextBtn.addEventListener('click', () => {
      currentTestimonial = (currentTestimonial + 1) % testimonials.length;
      showTestimonial(currentTestimonial);
    });
    // Auto-advance
    setInterval(() => {
      currentTestimonial = (currentTestimonial + 1) % testimonials.length;
      showTestimonial(currentTestimonial);
    }, 5000);
  }

  // 6) Form submission (┘К╪к┘Б╪╣┘Д ╪и╪│ ┘Д┘И ╪з┘Д┘Б┘И╪▒┘Е ┘Е┘И╪м┘И╪п)
  const appointmentForm = $('#appointmentForm');
  if (appointmentForm) {
    appointmentForm.addEventListener('submit', e => {
      e.preventDefault();
      const data = Object.fromEntries(new FormData(appointmentForm));

      // required
      const required = ['name', 'phone', 'service', 'date', 'time'];
      if (required.some(k => !data[k])) {
        alert('┘К╪▒╪м┘Й ┘Е┘Д╪б ╪м┘Е┘К╪╣ ╪з┘Д╪н┘В┘И┘Д ╪з┘Д┘Е╪╖┘Д┘И╪и╪й');
        return;
      }

      // KSA phone
      const phoneRegex = /^05\d{8}$/;
      if (!phoneRegex.test(data.phone)) {
        alert('┘К╪▒╪м┘Й ╪е╪п╪о╪з┘Д ╪▒┘В┘Е ┘З╪з╪к┘Б ╪╡╪н┘К╪н (05xxxxxxxx)');
        return;
      }

      // date in future
      const selectedDate = new Date(data.date);
      const today = new Date(); today.setHours(0, 0, 0, 0);
      if (selectedDate < today) {
        alert('┘К╪▒╪м┘Й ╪з╪о╪к┘К╪з╪▒ ╪к╪з╪▒┘К╪о ┘Б┘К ╪з┘Д┘Е╪│╪к┘В╪и┘Д');
        return;
      }

      alert('╪к┘Е ╪е╪▒╪│╪з┘Д ╪╖┘Д╪и ╪з┘Д┘Е┘И╪╣╪п ╪и┘Ж╪м╪з╪н! ╪│┘Ж╪к┘И╪з╪╡┘Д ┘Е╪╣┘Г ╪о┘Д╪з┘Д 24 ╪│╪з╪╣╪й.');
      appointmentForm.reset();
      console.log('Appointment data:', data);
    });

    // min date = tomorrow
    const dateInput = appointmentForm.querySelector('input[name="date"]');
    if (dateInput) {
      const t = new Date();
      t.setDate(t.getDate() + 1);
      dateInput.min = t.toISOString().split('T')[0];
    }
  }

  // 7) Reveal on scroll
  const revealEls = $$('.achievement, .service-item, .testimonial-item, .contact-item');
  if (revealEls.length && 'IntersectionObserver' in window) {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, { threshold: 0.1, rootMargin: '0px 0px -50px 0px' });

    revealEls.forEach(el => {
      el.style.opacity = '0';
      el.style.transform = 'translateY(20px)';
      el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(el);
    });
  }

  // 8) Counters
  if ('IntersectionObserver' in window) {
    const animateCounter = (el, target) => {
      let current = 0;
      const increment = Math.max(1, target / 100);
      const timer = setInterval(() => {
        current += increment;
        if (current >= target) { current = target; clearInterval(timer); }
        const suffix = target > 100 ? '+' : (target === 98 ? '%' : '+');
        el.textContent = `${Math.floor(current)}${suffix}`;
      }, 20);
    };

    const counterObserver = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const numberElement = entry.target.querySelector('.number');
          if (numberElement) {
            const n = parseInt(numberElement.textContent.replace(/\D/g, ''), 10) || 0;
            animateCounter(numberElement, n);
          }
          counterObserver.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });

    $$('.achievement').forEach(a => counterObserver.observe(a));
  }

  // 9) On load
  window.addEventListener('load', () => document.body.classList.add('loaded'));

  // 10) Section reveal class + inline CSS once
  const sections = $$('section');
  if (sections.length && 'IntersectionObserver' in window) {
    const sectionObserver = new IntersectionObserver(entries => {
      entries.forEach(e => { if (e.isIntersecting) e.target.classList.add('animate-in'); });
    }, { threshold: 0.1 });
    sections.forEach(s => sectionObserver.observe(s));
  }

  // inject minimal CSS (┘К┘Б╪╢┘Д ╪к╪н╪╖┘З╪з ┘Б┘К ┘Е┘Д┘Б CSS)
  if (!$('#inline-anim-css')) {
    const style = document.createElement('style');
    style.id = 'inline-anim-css';
    style.textContent = `
      .loaded { opacity: 1; }
      section { opacity: 0; transform: translateY(30px); transition: opacity .8s ease, transform .8s ease; }
      section.animate-in { opacity: 1; transform: translateY(0); }
      @media (max-width: 768px) {
        .nav.active {
          display: flex; flex-direction: column; position: absolute; top: 100%; left: 0; right: 0;
          background: var(--white, #fff); padding: 1rem; box-shadow: var(--shadow, 0 10px 20px rgba(0,0,0,.08));
          border-radius: 0 0 10px 10px;
        }
        .nav.active a { color: var(--primary, #333); padding: 0.5rem 1rem; width: 100%; text-align: center; border-bottom: 1px solid #eee; margin-left: 0 !important; margin-right: 0 !important; }
        .nav.active a:last-child { border-bottom: none; }
      }
    `;
    document.head.appendChild(style);
  }
});





/**
 * ===============================================
 * Main JavaScript File - ┘Е┘Д┘Б ╪з┘Д╪м╪з┘Б╪з ╪│┘Г╪▒┘К╪и╪к ╪з┘Д╪▒╪ж┘К╪│┘К
 * ===============================================
 * ╪м┘Е┘К╪╣ ╪з┘Д┘А scripts ┘Е┘Ж╪╕┘Е╪й ┘И┘Е┘В╪│┘Е╪й ╪и╪┤┘Г┘Д ┘И╪╕┘К┘Б┘К
 */

// ===============================================
// 1. DOM Ready Handler - ┘Е╪╣╪з┘Д╪м ╪м╪з┘З╪▓┘К╪й ╪з┘Д╪╡┘Б╪н╪й
// ===============================================
document.addEventListener("DOMContentLoaded", function () {
  console.log("ЁЯЪА ╪к┘Е ╪к╪н┘Е┘К┘Д ╪з┘Д╪╡┘Б╪н╪й ╪и┘Ж╪м╪з╪н");

  // ╪к╪┤╪║┘К┘Д ╪м┘Е┘К╪╣ ╪з┘Д┘И╪╕╪з╪ж┘Б ╪╣┘Ж╪п ╪к╪н┘Е┘К┘Д ╪з┘Д╪╡┘Б╪н╪й
  initMobileMenu();
  initBackToTop();
  initTestimonialsSlider();
  initBeforeAfterSliders();
  initMenuActiveState();
});

// ===============================================
// 2. Mobile Menu Functionality - ┘И╪╕╪з╪ж┘Б ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й
// ===============================================
function initMobileMenu() {
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const menuIcon = document.getElementById("menu-icon");

  // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ┘И╪м┘И╪п ╪з┘Д╪╣┘Ж╪з╪╡╪▒
  if (!mobileMenuButton || !mobileMenu || !menuIcon) {
    console.warn("тЪая╕П ╪╣┘Ж╪з╪╡╪▒ ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й ╪║┘К╪▒ ┘Е┘И╪м┘И╪п╪й");
    return;
  }

  /**
   * ╪к╪и╪п┘К┘Д ╪н╪з┘Д╪й ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й
   */
  function toggleMobileMenu() {
    const isMenuVisible = !mobileMenu.classList.contains("hidden");

    if (isMenuVisible) {
      // ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й
      closeMobileMenu();
    } else {
      // ┘Б╪к╪н ╪з┘Д┘В╪з╪ж┘Е╪й
      openMobileMenu();
    }
  }

  /**
   * ┘Б╪к╪н ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й
   */
  function openMobileMenu() {
    mobileMenu.classList.remove("hidden");
    mobileMenu.classList.add("animate-fade-in");

    // ╪к╪║┘К┘К╪▒ ╪з┘Д╪г┘К┘В┘И┘Ж╪й ╪е┘Д┘Й X
    menuIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M6 18L18 6M6 6l12 12" />
        `;

    console.log("ЁЯУ▒ ╪к┘Е ┘Б╪к╪н ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й");
  }

  /**
   * ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й
   */
  function closeMobileMenu() {
    mobileMenu.classList.add("hidden");

    // ╪к╪║┘К┘К╪▒ ╪з┘Д╪г┘К┘В┘И┘Ж╪й ╪е┘Д┘Й ╪з┘Д┘З╪з┘Е╪и╪▒╪м╪▒
    menuIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M4 6h16M4 12h16M4 18h16" />
        `;

    console.log("ЁЯУ▒ ╪к┘Е ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й");
  }

  // Event Listeners ┘Д┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й
  mobileMenuButton.addEventListener("click", toggleMobileMenu);

  // ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪╣┘Ж╪п ╪з┘Д┘Ж┘В╪▒ ╪о╪з╪▒╪м┘З╪з
  document.addEventListener("click", function (e) {
    const isClickOutside =
      !mobileMenu.contains(e.target) && !mobileMenuButton.contains(e.target);

    if (isClickOutside && !mobileMenu.classList.contains("hidden")) {
      closeMobileMenu();
    }
  });

  // ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪╣┘Ж╪п ╪з┘Д┘Ж┘В╪▒ ╪╣┘Д┘Й ╪з┘Д╪▒┘И╪з╪и╪╖
  const mobileLinks = mobileMenu.querySelectorAll("a");
  mobileLinks.forEach((link) => {
    link.addEventListener("click", closeMobileMenu);
  });
}

// ===============================================
// 3. Back to Top Button - ╪▓╪▒ ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й
// ===============================================
function initBackToTop() {
  const backToTopButton = document.getElementById("back-to-top");

  if (!backToTopButton) {
    console.warn("тЪая╕П ╪▓╪▒ ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й ╪║┘К╪▒ ┘Е┘И╪м┘И╪п");
    return;
  }

  /**
   * ╪е╪╕┘З╪з╪▒/╪е╪о┘Б╪з╪б ╪▓╪▒ ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й ╪н╪│╪и ┘Е┘И╪╢╪╣ ╪з┘Д╪к┘Е╪▒┘К╪▒
   */
  function handleScroll() {
    const scrollPosition = window.scrollY;
    const showThreshold = 300; // ╪е╪╕┘З╪з╪▒ ╪з┘Д╪▓╪▒ ╪и╪╣╪п ╪з┘Д╪к┘Е╪▒┘К╪▒ 300px

    if (scrollPosition > showThreshold) {
      showBackToTopButton();
    } else {
      hideBackToTopButton();
    }
  }

  /**
   * ╪е╪╕┘З╪з╪▒ ╪▓╪▒ ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й
   */
  function showBackToTopButton() {
    backToTopButton.classList.remove("opacity-0", "pointer-events-none");
    backToTopButton.classList.add("opacity-100");
  }

  /**
   * ╪е╪о┘Б╪з╪б ╪▓╪▒ ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й
   */
  function hideBackToTopButton() {
    backToTopButton.classList.remove("opacity-100");
    backToTopButton.classList.add("opacity-0", "pointer-events-none");
  }

  /**
   * ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й ╪и╪│┘Д╪з╪│╪й
   */
  function scrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    console.log("тмЖя╕П ╪к┘Е ╪з┘Д╪з┘Ж╪к┘В╪з┘Д ┘Д┘Д╪г╪╣┘Д┘Й");
  }

  // Event Listeners ┘Д╪▓╪▒ ╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪г╪╣┘Д┘Й
  window.addEventListener("scroll", handleScroll);
  backToTopButton.addEventListener("click", scrollToTop);
}

// ===============================================
// 4. Testimonials Slider - ╪│┘Д╪з┘К╪п╪▒ ╪з┘Д╪┤┘З╪з╪п╪з╪к
// ===============================================
function initTestimonialsSlider() {
  const testimonialsContainer = document.querySelector(".testimonials-swiper");

  if (!testimonialsContainer) {
    console.warn("тЪая╕П ╪│┘Д╪з┘К╪п╪▒ ╪з┘Д╪┤┘З╪з╪п╪з╪к ╪║┘К╪▒ ┘Е┘И╪м┘И╪п");
    return;
  }

  // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ┘И╪м┘И╪п ┘Е┘Г╪к╪и╪й Swiper
  if (typeof Swiper === "undefined") {
    console.error("тЭМ ┘Е┘Г╪к╪и╪й Swiper ╪║┘К╪▒ ┘Е╪н┘Е┘Д╪й");
    return;
  }

  try {
    // ╪е╪╣╪п╪з╪п╪з╪к ╪│┘Д╪з┘К╪п╪▒ ╪з┘Д╪┤┘З╪з╪п╪з╪к
    new Swiper(".testimonials-swiper", {
      // ╪з┘Д╪е╪╣╪п╪з╪п╪з╪к ╪з┘Д╪г╪│╪з╪│┘К╪й
      slidesPerView: 1,
      spaceBetween: 30,
      loop: true,

      // ╪з┘Д╪к╪┤╪║┘К┘Д ╪з┘Д╪к┘Д┘В╪з╪ж┘К
      autoplay: {
        delay: 3000,
        disableOnInteraction: false,
        pauseOnMouseEnter: true,
      },

      // ╪з┘Д┘Ж┘В╪з╪╖ ╪з┘Д╪│┘Б┘Д┘К╪й
      pagination: {
        el: ".swiper-pagination",
        clickable: true,
        dynamicBullets: true,
      },

      // ╪г╪▓╪▒╪з╪▒ ╪з┘Д╪к┘Ж┘В┘Д
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },

      // ╪з┘Д╪з╪│╪к╪м╪з╪и╪й ┘Д┘Д╪┤╪з╪┤╪з╪к ╪з┘Д┘Е╪о╪к┘Д┘Б╪й
      breakpoints: {
        640: {
          slidesPerView: 1,
          spaceBetween: 20,
        },
        768: {
          slidesPerView: 2,
          spaceBetween: 30,
        },
        1024: {
          slidesPerView: 3,
          spaceBetween: 30,
        },
      },

      // ╪з┘Д╪к╪г╪л┘К╪▒╪з╪к
      effect: "slide",
      speed: 600,

      // ╪з┘Д┘Д┘Е╪│ ┘И╪з┘Д╪│╪н╪и
      touchRatio: 1,
      touchAngle: 45,
      grabCursor: true,
    });

    console.log("ЁЯОа ╪к┘Е ╪к╪┤╪║┘К┘Д ╪│┘Д╪з┘К╪п╪▒ ╪з┘Д╪┤┘З╪з╪п╪з╪к ╪и┘Ж╪м╪з╪н");
  } catch (error) {
    console.error("тЭМ ╪о╪╖╪г ┘Б┘К ╪к╪┤╪║┘К┘Д ╪│┘Д╪з┘К╪п╪▒ ╪з┘Д╪┤┘З╪з╪п╪з╪к:", error);
  }
}

// ===============================================
// 5. Menu Active State - ╪н╪з┘Д╪й ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Ж╪┤╪╖╪й
// ===============================================
function initMenuActiveState() {
  const menuLinks = document.querySelectorAll(".menu-link");

  if (menuLinks.length === 0) {
    console.warn("тЪая╕П ╪▒┘И╪з╪и╪╖ ╪з┘Д┘В╪з╪ж┘Е╪й ╪║┘К╪▒ ┘Е┘И╪м┘И╪п╪й");
    return;
  }

  /**
   * ╪к┘Б╪╣┘К┘Д ╪з┘Д╪▒╪з╪и╪╖ ╪з┘Д┘Е╪н╪п╪п
   */
  function setActiveLink(clickedLink) {
    // ╪е╪▓╪з┘Д╪й ╪з┘Д╪н╪з┘Д╪й ╪з┘Д┘Ж╪┤╪╖╪й ┘Е┘Ж ╪м┘Е┘К╪╣ ╪з┘Д╪▒┘И╪з╪и╪╖
    menuLinks.forEach((link) => {
      link.classList.remove("active");
    });

    // ╪е╪╢╪з┘Б╪й ╪з┘Д╪н╪з┘Д╪й ╪з┘Д┘Ж╪┤╪╖╪й ┘Д┘Д╪▒╪з╪и╪╖ ╪з┘Д┘Е╪н╪п╪п
    clickedLink.classList.add("active");

    console.log("ЁЯФЧ ╪к┘Е ╪к┘Б╪╣┘К┘Д ╪з┘Д╪▒╪з╪и╪╖:", clickedLink.textContent);
  }

  // ╪е╪╢╪з┘Б╪й Event Listeners ┘Д╪▒┘И╪з╪и╪╖ ╪з┘Д┘В╪з╪ж┘Е╪й
  menuLinks.forEach((link) => {
    link.addEventListener("click", function (e) {
      setActiveLink(this);
    });
  });

  // ╪е╪╢╪з┘Б╪й ┘И╪╕┘К┘Б╪й ╪е╪╢╪з┘Б┘К╪й ┘Д╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й ╪╣┘Ж╪п ╪з┘Д┘Ж┘В╪▒ ╪╣┘Д┘Й ╪з┘Д╪▒┘И╪з╪и╪╖
  // (┘З╪░╪з ┘Д┘Д╪к╪г┘Г╪п ┘Е┘Ж ╪з┘Д╪к┘И╪з┘Б┘В ┘Е╪╣ ╪з┘Д┘Г┘И╪п ╪з┘Д╪г╪╡┘Д┘К)
  const mobileLinkElements = document.querySelectorAll("#mobile-menu a");
  const mobileMenuElement = document.getElementById("mobile-menu");
  const menuIconElement = document.getElementById("menu-icon");

  if (mobileLinkElements.length > 0 && mobileMenuElement && menuIconElement) {
    mobileLinkElements.forEach((link) => {
      link.addEventListener("click", function () {
        // ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й
        mobileMenuElement.classList.add("hidden");
        menuIconElement.innerHTML =
          '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />';
        console.log("ЁЯУ▒ ╪к┘Е ╪е╪║┘Д╪з┘В ╪з┘Д┘В╪з╪ж┘Е╪й ╪з┘Д┘Е╪н┘Е┘И┘Д╪й ┘Е┘Ж ╪▒╪з╪и╪╖ ╪з┘Д┘В╪з╪ж┘Е╪й");
      });
    });
  }
}

// ===============================================
// 6. Before/After Slider - ╪│┘Д╪з┘К╪п╪▒ ┘В╪и┘Д/╪и╪╣╪п
// ===============================================
function initBeforeAfterSliders() {
  const sliders = document.querySelectorAll(".before-after-container");

  if (sliders.length === 0) {
    console.warn("тЪая╕П ╪│┘Д╪з┘К╪п╪▒╪з╪к ┘В╪и┘Д/╪и╪╣╪п ╪║┘К╪▒ ┘Е┘И╪м┘И╪п╪й");
    return;
  }

  sliders.forEach((container, index) => {
    const handle = container.querySelector(".slider-handle");
    const afterImage = container.querySelector(".after-image");
    const sliderLine = container.querySelector(".slider-line");

    // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ┘И╪м┘И╪п ╪з┘Д╪╣┘Ж╪з╪╡╪▒ ╪з┘Д┘Е╪╖┘Д┘И╪и╪й
    if (!handle || !afterImage || !sliderLine) {
      console.warn(`тЪая╕П ╪╣┘Ж╪з╪╡╪▒ ╪│┘Д╪з┘К╪п╪▒ ┘В╪и┘Д/╪и╪╣╪п ╪▒┘В┘Е ${index + 1} ╪║┘К╪▒ ┘Е┘Г╪к┘Е┘Д╪й`);
      return;
    }

    let isDragging = false;
    let animationId = null;

    /**
     * ╪к╪н╪п┘К╪л ┘Е┘И╪╢╪╣ ╪з┘Д╪│┘Д╪з┘К╪п╪▒
     */
    function updateSlider(percentage) {
      // ╪з┘Д╪к╪г┘Г╪п ┘Е┘Ж ╪г┘Ж ╪з┘Д┘Ж╪│╪и╪й ╪и┘К┘Ж 0 ┘И 100
      percentage = Math.max(0, Math.min(100, percentage));

      // ╪к╪н╪п┘К╪л ┘В┘Ж╪з╪╣ ╪з┘Д╪╡┘И╪▒╪й
      afterImage.style.clipPath = `inset(0 0 0 ${percentage}%)`;

      // ╪к╪н╪п┘К╪л ┘Е┘И╪╢╪╣ ╪з┘Д┘Е┘В╪и╪╢ ┘И╪з┘Д╪о╪╖
      handle.style.left = `${percentage}%`;
      sliderLine.style.left = `${percentage}%`;

      // ╪к╪н╪п┘К╪л ╪о╪з╪╡┘К╪й ╪з┘Д╪и┘К╪з┘Ж╪з╪к ┘Д┘Д╪з╪│╪к╪о╪п╪з┘Е ╪з┘Д┘Е╪│╪к┘В╪и┘Д┘К
      container.setAttribute("data-position", percentage);
    }

    /**
     * ╪и╪п╪з┘К╪й ╪з┘Д╪│╪н╪и - ╪з┘Д┘Е╪з┘И╪│
     */
    function handleMouseDown(e) {
      isDragging = true;
      document.body.style.cursor = "ew-resize";
      document.body.style.userSelect = "none";
      e.preventDefault();
    }

    /**
     * ╪г╪л┘Ж╪з╪б ╪з┘Д╪│╪н╪и - ╪з┘Д┘Е╪з┘И╪│
     */
    function handleMouseMove(e) {
      if (!isDragging) return;

      // ╪е┘Д╪║╪з╪б ╪з┘Д╪е╪╖╪з╪▒ ╪з┘Д╪│╪з╪и┘В ┘Д┘Д╪н╪╡┘И┘Д ╪╣┘Д┘Й ╪г╪п╪з╪б ╪г┘Б╪╢┘Д
      if (animationId) {
        cancelAnimationFrame(animationId);
      }

      animationId = requestAnimationFrame(() => {
        const rect = container.getBoundingClientRect();
        const percentage = ((e.clientX - rect.left) / rect.width) * 100;
        updateSlider(percentage);
      });
    }

    /**
     * ╪з┘Ж╪к┘З╪з╪б ╪з┘Д╪│╪н╪и - ╪з┘Д┘Е╪з┘И╪│
     */
    function handleMouseUp() {
      isDragging = false;
      document.body.style.cursor = "default";
      document.body.style.userSelect = "";

      if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
      }
    }

    /**
     * ╪и╪п╪з┘К╪й ╪з┘Д┘Д┘Е╪│ - ╪з┘Д┘З╪з╪к┘Б
     */
    function handleTouchStart(e) {
      isDragging = true;
      e.preventDefault();
    }

    /**
     * ╪г╪л┘Ж╪з╪б ╪з┘Д┘Д┘Е╪│ - ╪з┘Д┘З╪з╪к┘Б
     */
    function handleTouchMove(e) {
      if (!isDragging) return;

      if (animationId) {
        cancelAnimationFrame(animationId);
      }

      animationId = requestAnimationFrame(() => {
        const rect = container.getBoundingClientRect();
        const touch = e.touches[0];
        const percentage = ((touch.clientX - rect.left) / rect.width) * 100;
        updateSlider(percentage);
      });

      e.preventDefault();
    }

    /**
     * ╪з┘Ж╪к┘З╪з╪б ╪з┘Д┘Д┘Е╪│ - ╪з┘Д┘З╪з╪к┘Б
     */
    function handleTouchEnd() {
      isDragging = false;

      if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
      }
    }

    /**
     * ╪з┘Д┘Ж┘В╪▒ ┘Б┘К ╪г┘К ┘Е┘Г╪з┘Ж ╪╣┘Д┘Й ╪з┘Д╪н╪з┘И┘К╪й
     */
    function handleContainerClick(e) {
      // ╪к╪м╪з┘З┘Д ╪з┘Д┘Ж┘В╪▒ ╪╣┘Д┘Й ╪з┘Д┘Е┘В╪и╪╢ ┘Ж┘Б╪│┘З
      if (e.target === handle || handle.contains(e.target)) return;

      const rect = container.getBoundingClientRect();
      const percentage = ((e.clientX - rect.left) / rect.width) * 100;

      // ╪е╪╢╪з┘Б╪й ╪к╪г╪л┘К╪▒ ╪з┘Ж╪к┘В╪з┘Д ╪│┘Д╪│
      handle.style.transition = "left 0.3s ease";
      sliderLine.style.transition = "left 0.3s ease";
      afterImage.style.transition = "clip-path 0.3s ease";

      updateSlider(percentage);

      // ╪е╪▓╪з┘Д╪й ╪з┘Д╪к╪г╪л┘К╪▒ ╪и╪╣╪п ╪з┘Д╪з┘Ж╪к┘З╪з╪б
      setTimeout(() => {
        handle.style.transition = "";
        sliderLine.style.transition = "";
        afterImage.style.transition = "";
      }, 300);
    }

    // Event Listeners ┘Д┘Д┘Е╪з┘И╪│
    handle.addEventListener("mousedown", handleMouseDown);
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);

    // Event Listeners ┘Д┘Д┘Е╪│
    handle.addEventListener("touchstart", handleTouchStart, { passive: false });
    document.addEventListener("touchmove", handleTouchMove, { passive: false });
    document.addEventListener("touchend", handleTouchEnd);

    // ╪з┘Д┘Ж┘В╪▒ ╪╣┘Д┘Й ╪з┘Д╪н╪з┘И┘К╪й
    container.addEventListener("click", handleContainerClick);

    // ╪е╪╢╪з┘Б╪й ╪п╪╣┘Е ┘Д┘И╪н╪й ╪з┘Д┘Е┘Б╪з╪к┘К╪н
    handle.setAttribute("tabindex", "0");
    handle.addEventListener("keydown", function (e) {
      const currentPosition =
        parseFloat(container.getAttribute("data-position")) || 50;
      let newPosition = currentPosition;

      switch (e.key) {
        case "ArrowLeft":
          newPosition = Math.max(0, currentPosition - 5);
          break;
        case "ArrowRight":
          newPosition = Math.min(100, currentPosition + 5);
          break;
        case "Home":
          newPosition = 0;
          break;
        case "End":
          newPosition = 100;
          break;
        default:
          return;
      }

      e.preventDefault();
      updateSlider(newPosition);
    });

    // ╪к┘З┘К╪ж╪й ╪з┘Д╪│┘Д╪з┘К╪п╪▒ ┘Б┘К ╪з┘Д┘Е┘И╪╢╪╣ ╪з┘Д╪з┘Б╪к╪▒╪з╪╢┘К (50%)
    updateSlider(50);

    console.log(`ЁЯЦ╝я╕П ╪к┘Е ╪к╪┤╪║┘К┘Д ╪│┘Д╪з┘К╪п╪▒ ┘В╪и┘Д/╪и╪╣╪п ╪▒┘В┘Е ${index + 1}`);
  });
}

// ===============================================
// 7. Utility Functions - ┘И╪╕╪з╪ж┘Б ┘Е╪│╪з╪╣╪п╪й
// ===============================================

/**
 * ╪к┘Ж┘Б┘К╪░ ┘И╪╕┘К┘Б╪й ╪╣┘Ж╪п ╪з┘Ж╪к┘З╪з╪б ╪з┘Д╪к╪н┘Е┘К┘Д
 */
function onDocumentReady(callback) {
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", callback);
  } else {
    callback();
  }
}

/**
 * ╪е╪╢╪з┘Б╪й ╪к╪г╪л┘К╪▒ fade ┘Д┘Д╪╣┘Ж╪╡╪▒
 */
function fadeIn(element, duration = 300) {
  element.style.opacity = "0";
  element.style.display = "block";

  let start = performance.now();

  function animate(currentTime) {
    const elapsed = currentTime - start;
    const progress = Math.min(elapsed / duration, 1);

    element.style.opacity = progress;

    if (progress < 1) {
      requestAnimationFrame(animate);
    }
  }

  requestAnimationFrame(animate);
}

/**
 * ╪е╪▓╪з┘Д╪й ╪к╪г╪л┘К╪▒ fade ┘Д┘Д╪╣┘Ж╪╡╪▒
 */
function fadeOut(element, duration = 300) {
  let start = performance.now();
  const initialOpacity = parseFloat(getComputedStyle(element).opacity);

  function animate(currentTime) {
    const elapsed = currentTime - start;
    const progress = Math.min(elapsed / duration, 1);

    element.style.opacity = initialOpacity * (1 - progress);

    if (progress < 1) {
      requestAnimationFrame(animate);
    } else {
      element.style.display = "none";
    }
  }

  requestAnimationFrame(animate);
}

/**
 * ╪е╪╢╪з┘Б╪й/╪е╪▓╪з┘Д╪й ┘Б╪ж╪й CSS ┘Е╪╣ ╪з┘Ж╪к┘В╪з┘Д
 */
function toggleClassSmooth(element, className, duration = 300) {
  if (element.classList.contains(className)) {
    element.classList.remove(className);
  } else {
    element.classList.add(className);
  }
}

// ===============================================
// 8. Performance Optimization - ╪к╪н╪│┘К┘Ж ╪з┘Д╪г╪п╪з╪б
// ===============================================

/**
 * Throttle function ┘Д┘Д╪н╪п ┘Е┘Ж ╪з╪│╪к╪п╪╣╪з╪б ╪з┘Д┘И╪╕╪з╪ж┘Б ╪з┘Д┘Е╪к┘Г╪▒╪▒╪й
 */
function throttle(func, limit) {
  let inThrottle;
  return function () {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
}

/**
 * Debounce function ┘Д╪к╪г╪о┘К╪▒ ╪к┘Ж┘Б┘К╪░ ╪з┘Д┘И╪╕╪з╪ж┘Б
 */
function debounce(func, wait, immediate) {
  let timeout;
  return function () {
    const context = this,
      args = arguments;
    const later = function () {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    const callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

// ===============================================
// 9. Error Handling - ┘Е╪╣╪з┘Д╪м╪й ╪з┘Д╪г╪о╪╖╪з╪б
// ===============================================

/**
 * ┘Е╪╣╪з┘Д╪м ╪з┘Д╪г╪о╪╖╪з╪б ╪з┘Д╪╣╪з┘Е
 */
window.addEventListener("error", function (e) {
  console.error("тЭМ ╪н╪п╪л ╪о╪╖╪г ┘Б┘К ╪з┘Д╪м╪з┘Б╪з ╪│┘Г╪▒┘К╪и╪к:", {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno,
    error: e.error,
  });
});

/**
 * ┘Е╪╣╪з┘Д╪м ╪з┘Д╪г╪о╪╖╪з╪б ┘Д┘Д┘А Promises
 */
window.addEventListener("unhandledrejection", function (e) {
  console.error("тЭМ ╪о╪╖╪г ┘Б┘К Promise ╪║┘К╪▒ ┘Е╪╣╪з┘Д╪м:", e.reason);
  e.preventDefault(); // ┘Е┘Ж╪╣ ╪е╪╕┘З╪з╪▒ ╪з┘Д╪о╪╖╪г ┘Б┘К ╪з┘Д┘Г┘И┘Ж╪│┘И┘Д
});

// ===============================================
// 10. Cleanup on Page Unload - ╪к┘Ж╪╕┘К┘Б ╪╣┘Ж╪п ╪к╪▒┘Г ╪з┘Д╪╡┘Б╪н╪й
// ===============================================
window.addEventListener("beforeunload", function () {
  // ╪е┘Д╪║╪з╪б ╪м┘Е┘К╪╣ ╪з┘Д┘А animation frames
  if (typeof cancelAnimationFrame !== "undefined") {
    // ┘К┘Е┘Г┘Ж ╪е╪╢╪з┘Б╪й ╪г┘К ╪к┘Ж╪╕┘К┘Б ┘Е╪╖┘Д┘И╪и ┘З┘Ж╪з
  }

  console.log("ЁЯСЛ ╪к┘Е ╪к╪▒┘Г ╪з┘Д╪╡┘Б╪н╪й - ╪к┘Е ╪з┘Д╪к┘Ж╪╕┘К┘Б");
});

// ===============================================
// Final Console Message - ╪▒╪│╪з┘Д╪й ┘Ж┘З╪з╪ж┘К╪й
// ===============================================
console.log(`
ЁЯОЙ ╪к┘Е ╪к╪н┘Е┘К┘Д ┘Е┘Д┘Б JavaScript ╪з┘Д╪▒╪ж┘К╪│┘К ╪и┘Ж╪м╪з╪н!
ЁЯУЕ ${new Date().toLocaleString("ar-EG")}
тЬЕ ╪м┘Е┘К╪╣ ╪з┘Д┘И╪╕╪з╪ж┘Б ╪м╪з┘З╪▓╪й ┘Д┘Д╪╣┘Е┘Д
`);


// Update the Before/After slider initialization
function initBeforeAfterSliders() {
  const sliders = document.querySelectorAll(".before-after-container");

  sliders.forEach((container) => {
    const afterImage = container.querySelector(".after-image");
    const sliderLine = container.querySelector(".slider-line");
    const handle = container.querySelector(".slider-handle");

    if (!afterImage || !sliderLine || !handle) return;

    let isDragging = false;

    const updateSlider = (clientX) => {
      const rect = container.getBoundingClientRect();
      let x = clientX - rect.left;
      x = Math.max(0, Math.min(x, rect.width));
      const percentage = (x / rect.width) * 100;

      // Update the after image clip
      afterImage.style.clipPath = `inset(0 0 0 ${percentage}%)`;

      // Update slider line and handle position
      sliderLine.style.left = `${percentage}%`;
      handle.style.left = `${percentage}%`;
    };

    // Mouse events
    container.addEventListener('mousedown', (e) => {
      isDragging = true;
      updateSlider(e.clientX);
      e.preventDefault();
    });

    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        updateSlider(e.clientX);
      }
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });

    // Touch events for mobile
    container.addEventListener('touchstart', (e) => {
      isDragging = true;
      updateSlider(e.touches[0].clientX);
      e.preventDefault();
    }, { passive: false });

    document.addEventListener('touchmove', (e) => {
      if (isDragging) {
        updateSlider(e.touches[0].clientX);
        e.preventDefault();
      }
    }, { passive: false });

    document.addEventListener('touchend', () => {
      isDragging = false;
    });

    // Click to set position
    container.addEventListener('click', (e) => {
      updateSlider(e.clientX);
    });
  });
}

// Call this function when DOM is loaded
document.addEventListener('DOMContentLoaded', function () {
  initBeforeAfterSliders();
});